import pandas as pd
import unidecode

# -------------------- FUNÇÃO PARA GERAR SIGLA --------------------
def gerar_sigla_sugerida(municipio, site, uf, usados, df_total):
    stopwords = {"DE", "DO", "DA", "DOS", "DAS", "E"}

    # Normaliza e quebra palavras
    def limpar(palavra):
        return unidecode.unidecode(palavra.strip().upper())

    municipio_parts = [limpar(w) for w in municipio.split() if limpar(w) not in stopwords]
    site_parts = [limpar(w) for w in site.split() if limpar(w) not in stopwords]

    if not municipio_parts or not site_parts:
        return None

    m = municipio_parts[-1]  # última palavra do município
    candidates = []

    # Regra 1
    if len(site_parts) >= 3:
        candidates.append(site_parts[0][0] + site_parts[1][0] + site_parts[2][0])
    elif len(site_parts) == 2:
        candidates.append(m[0] + site_parts[0][0] + site_parts[1][0])
    else:  # 1 palavra
        if len(site_parts[0]) >= 2:
            candidates.append(m[0] + site_parts[0][0] + site_parts[0][1])

    # Regra 2
    if len(site_parts) >= 2:
        candidates.append(site_parts[0][:2] + site_parts[1][0])
    else:
        if len(site_parts[0]) >= 3:
            candidates.append(site_parts[0][:3])

    # Regra 3
    if len(site_parts[0]) >= 2:
        candidates.append(m[0] + site_parts[0][0] + site_parts[0][1])

    # Regra 4
    if len(m) >= 2:
        candidates.append(m[0] + m[1] + site_parts[0][0])

    # Regra 5
    if len(site_parts) >= 2:
        candidates.append(m[0] + site_parts[0][0] + site_parts[1][0])

    # Regra 6
    if len(site_parts) >= 2 and len(site_parts[0]) >= 2:
        candidates.append(m[0] + site_parts[0][1] + site_parts[1][0])

    # Regra 7: varredura monotônica
    bloco = m + "".join(site_parts)
    for i in range(len(bloco)):
        for j in range(i + 1, len(bloco)):
            for k in range(j + 1, len(bloco)):
                candidates.append(bloco[i] + bloco[j] + bloco[k])

    # Normaliza todos os candidatos
    candidates = [c.upper() for c in candidates if len(c) == 3]

    # Checa unicidade contra df_total e já usados
    usados_uf = set(df_total.loc[df_total["SIG_ESTADO"] == uf, "SIG_SITE"].unique())
    for cand in candidates:
        if cand not in usados[uf] and cand not in usados_uf:
            usados[uf].add(cand)
            return cand

    return None


# -------------------- PIPELINE PRINCIPAL --------------------
# Exemplo: df_total já carregados

arquivo = "seuarquivo.xlsx"
df_out = pd.read_excel(arquivo, sheet_name="Planilha1", usecols=["ID MASTER"])


colunas = [
    "ID MASTER",
    "Sigla (Master)",
    "Sigla Sugerida 
Preencher com UFXXX,
    "Nova Sigla do Site (SOI)",
    "Nome do Site (Master)",
    "Novo Nome do Site (SOI)",
    "B2B",
    "Criticidade",
    "Utilização",
    "Detalhe para Aquisição",
    "Operação",
    "Tipologia",
    "Co-Site",
    "Origem",
    "Altura (metros)",
    "Número de RRU",
    "Número de Antenas",
    "Processado pela Automação?"
]

for col in colunas:
    if col not in df_out.columns:
        df_out[col] = ""

# Preenche fixos
df_out["B2B"] = "Não"
df_out["Criticidade"] = "Alta"
df_out["Utilização"] = "Equipamento"
df_out["Operação"] = "Móvel"
df_out["Co-Site"] = "Não"
df_out["Origem"] = "Móvel"

# Merge com df (já traz Sigla, Nome do Site, Cobertura e Setores)
df_out = df_out.merge(
    on="ID MASTER",
    how="left"
)

# Colunas do site
df_out["Sigla (Master)"] = df_out["Sigla"]
df_out["Nome do Site (Master)"] = df_out["Nome do Site"]
df_out["Novo Nome do Site (SOI)"] = df_out["Nome do Site (Master)"].str.upper()

# Tipologia (mapeamento da coluna Cobertura)
mapeamento_tipologia = {
    "Outdoor": "Outdoor",
    "SmallCell": "Micro Cell",
    "Indoor": "Indoor",
    "Móvel": "Outdoor",
    "Indoor/Outdoor": "Indoor/Outdoor",
    "LampSite": "Indoor",
    "PicoCell": "Micro Cell"
}
df_out["Tipologia"] = df_out["Cobertura"].map(mapeamento_tipologia)

# Número de Antenas = igual ao número de Setores
#df_out["Número de Antenas"] = df_out["Setores"]

# Geração da Sigla Sugerida
usados = {uf: set() for uf in df_total["SIG_ESTADO"].unique()}

for i, row in df_out.iterrows():
    uf = row["ID MASTER"][:2]  # duas primeiras letras = UF
    if pd.notna(row["Novo Nome do Site (SOI)"]):
        partes = row["Novo Nome do Site (SOI)"].split("-")
        if len(partes) == 2:
            municipio, site = partes[0].strip(), partes[1].strip()
            sigla = gerar_sigla_sugerida(municipio, site, uf, usados, df_total)
            df_out.at[i, "Sigla Sugerida"] = sigla if sigla else ""

# Limpa colunas auxiliares
df_out = df_out.drop(columns=["Sigla", "Nome do Site", "Cobertura", "Setores"])
df_out = df_out[colunas]

# Salva resultado
df_out.to_excel("saida.xlsx", index=False)
print("Planilha gerada com sucesso!")
