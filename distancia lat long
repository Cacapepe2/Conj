import pandas as pd
import numpy as np
from sklearn.neighbors import BallTree
 
# --------------------------
# Configurações principais
# --------------------------
RAIO_METROS = 250
RAIO_RADIANOS = RAIO_METROS / 6371000  # Raio da Terra ≈ 6.371 km
COL_LAT = "latitude"
COL_LON = "longitude"
COL_ID = "id_detentora"
 
# --------------------------
# Leitura das planilhas
# --------------------------
df1 = pd.read_excel("sites_df1.xlsx")  # Sites principais
df2 = pd.read_excel("sites_df2.xlsx")  # Sites que terão a coluna preenchida
 
# Cria a coluna para armazenar os detalhes
df2["Detalhe de Aquisição"] = ""
 
# --------------------------
# Conversão para radianos
# --------------------------
coords_df1 = np.radians(df1[[COL_LAT, COL_LON]].values)
coords_df2 = np.radians(df2[[COL_LAT, COL_LON]].values)
 
# --------------------------
# Construção da BallTree
# --------------------------
tree = BallTree(coords_df2, metric="haversine")
 
# --------------------------
# Busca do site mais próximo
# --------------------------
distancias, indices = tree.query(coords_df1, k=1)
 
# distancias -> em radianos, convertemos para metros
distancias_metros = distancias[:, 0] * 6371000  # Raio médio da Terra em metros
indices = indices[:, 0]  # Índices dos sites mais próximos no df2
 
# --------------------------
# Preenchimento do df2
# --------------------------
for i, dist in enumerate(distancias_metros):
    if dist <= RAIO_METROS:
        idx_df2 = indices[i]
        df2.loc[idx_df2, "Detalhe de Aquisição"] = (
            f"Este {df2.loc[idx_df2, COL_ID]} está há {int(dist)} metros deste site"
        )
 
# --------------------------
# Salvar resultado
# --------------------------
df2.to_excel("sites_df2_atualizado.xlsx", index=False)
 
print("✅ Processamento concluído com BallTree!")
print(f"Arquivo 'sites_df2_atualizado.xlsx' gerado com sucesso.")
 
